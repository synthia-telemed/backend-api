// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/appointment/complete": {
            "post": {
                "security": [
                    {
                        "UserID": []
                    },
                    {
                        "JWSToken": []
                    }
                ],
                "tags": [
                    "Appointment"
                ],
                "summary": "Finish the appointment and close the room",
                "parameters": [
                    {
                        "description": "Status of the appointment",
                        "name": "CompleteAppointmentRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.CompleteAppointmentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Return the duration in minutes",
                        "schema": {
                            "$ref": "#/definitions/handler.CompleteAppointmentResponse"
                        }
                    },
                    "400": {
                        "description": "Doctor isn't currently in any room",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/appointment/today": {
            "get": {
                "security": [
                    {
                        "UserID": []
                    },
                    {
                        "JWSToken": []
                    }
                ],
                "tags": [
                    "Appointment"
                ],
                "summary": "Get list of today appointment",
                "responses": {
                    "200": {
                        "description": "List of appointment group by status",
                        "schema": {
                            "$ref": "#/definitions/hospital.CategorizedAppointment"
                        }
                    },
                    "400": {
                        "description": "Doctor not found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/appointment/{appointmentID}": {
            "post": {
                "security": [
                    {
                        "UserID": []
                    },
                    {
                        "JWSToken": []
                    }
                ],
                "tags": [
                    "Appointment"
                ],
                "summary": "Init the appointment room",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the appointment",
                        "name": "appointmentID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Room ID is return to be used with socket server",
                        "schema": {
                            "$ref": "#/definitions/handler.InitAppointmentRoomResponse"
                        }
                    },
                    "400": {
                        "description": "The appointment can start 10 minutes early and not later than 3 hours",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Appointment not found",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/signin": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Signin doctor with credential",
                "parameters": [
                    {
                        "description": "Username and password of the doctor",
                        "name": "SigninRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.SigninRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Token is return when authentication is successes",
                        "schema": {
                            "$ref": "#/definitions/handler.SigninResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Provided credential is not in the hospital system",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.CompleteAppointmentRequest": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "CANCELLED",
                        "COMPLETED"
                    ]
                }
            }
        },
        "handler.CompleteAppointmentResponse": {
            "type": "object",
            "properties": {
                "duration": {
                    "type": "number"
                }
            }
        },
        "handler.InitAppointmentRoomResponse": {
            "type": "object",
            "properties": {
                "room_id": {
                    "type": "string"
                }
            }
        },
        "handler.SigninRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handler.SigninResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "hospital.AppointmentOverview": {
            "type": "object",
            "properties": {
                "date_time": {
                    "type": "string"
                },
                "doctor": {
                    "$ref": "#/definitions/hospital.DoctorOverview"
                },
                "id": {
                    "type": "string"
                },
                "patient": {
                    "$ref": "#/definitions/hospital.PatientOverview"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "hospital.CategorizedAppointment": {
            "type": "object",
            "properties": {
                "cancelled": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/hospital.AppointmentOverview"
                    }
                },
                "completed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/hospital.AppointmentOverview"
                    }
                },
                "scheduled": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/hospital.AppointmentOverview"
                    }
                }
            }
        },
        "hospital.DoctorOverview": {
            "type": "object",
            "properties": {
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "position": {
                    "type": "string"
                },
                "profile_pic_url": {
                    "type": "string"
                }
            }
        },
        "hospital.PatientOverview": {
            "type": "object",
            "properties": {
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "server.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWSToken": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "UserID": {
            "type": "apiKey",
            "name": "X-USER-ID",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "",
	BasePath:         "/doctor/api",
	Schemes:          []string{},
	Title:            "Synthia Doctor Backend API",
	Description:      "This is a Synthia doctor backend API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
