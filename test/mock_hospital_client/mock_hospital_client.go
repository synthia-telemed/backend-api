// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/hospital/hospital.go

// Package mock_hospital_client is a generated GoMock package.
package mock_hospital_client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hospital "github.com/synthia-telemed/backend-api/pkg/hospital"
)

// MockSystemClient is a mock of SystemClient interface.
type MockSystemClient struct {
	ctrl     *gomock.Controller
	recorder *MockSystemClientMockRecorder
}

// MockSystemClientMockRecorder is the mock recorder for MockSystemClient.
type MockSystemClientMockRecorder struct {
	mock *MockSystemClient
}

// NewMockSystemClient creates a new mock instance.
func NewMockSystemClient(ctrl *gomock.Controller) *MockSystemClient {
	mock := &MockSystemClient{ctrl: ctrl}
	mock.recorder = &MockSystemClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystemClient) EXPECT() *MockSystemClientMockRecorder {
	return m.recorder
}

// AssertDoctorCredential mocks base method.
func (m *MockSystemClient) AssertDoctorCredential(ctx context.Context, username, password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssertDoctorCredential", ctx, username, password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssertDoctorCredential indicates an expected call of AssertDoctorCredential.
func (mr *MockSystemClientMockRecorder) AssertDoctorCredential(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssertDoctorCredential", reflect.TypeOf((*MockSystemClient)(nil).AssertDoctorCredential), ctx, username, password)
}

// FindPatientByGovCredential mocks base method.
func (m *MockSystemClient) FindPatientByGovCredential(ctx context.Context, cred string) (*hospital.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPatientByGovCredential", ctx, cred)
	ret0, _ := ret[0].(*hospital.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPatientByGovCredential indicates an expected call of FindPatientByGovCredential.
func (mr *MockSystemClientMockRecorder) FindPatientByGovCredential(ctx, cred interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPatientByGovCredential", reflect.TypeOf((*MockSystemClient)(nil).FindPatientByGovCredential), ctx, cred)
}
