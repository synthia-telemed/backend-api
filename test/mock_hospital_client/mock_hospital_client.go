// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/hospital/hospital.go

// Package mock_hospital_client is a generated GoMock package.
package mock_hospital_client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hospital "github.com/synthia-telemed/backend-api/pkg/hospital"
)

// MockSystemClient is a mock of SystemClient interface.
type MockSystemClient struct {
	ctrl     *gomock.Controller
	recorder *MockSystemClientMockRecorder
}

// MockSystemClientMockRecorder is the mock recorder for MockSystemClient.
type MockSystemClientMockRecorder struct {
	mock *MockSystemClient
}

// NewMockSystemClient creates a new mock instance.
func NewMockSystemClient(ctrl *gomock.Controller) *MockSystemClient {
	mock := &MockSystemClient{ctrl: ctrl}
	mock.recorder = &MockSystemClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystemClient) EXPECT() *MockSystemClientMockRecorder {
	return m.recorder
}

// AssertDoctorCredential mocks base method.
func (m *MockSystemClient) AssertDoctorCredential(ctx context.Context, username, password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssertDoctorCredential", ctx, username, password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssertDoctorCredential indicates an expected call of AssertDoctorCredential.
func (mr *MockSystemClientMockRecorder) AssertDoctorCredential(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssertDoctorCredential", reflect.TypeOf((*MockSystemClient)(nil).AssertDoctorCredential), ctx, username, password)
}

// FindDoctorByUsername mocks base method.
func (m *MockSystemClient) FindDoctorByUsername(ctx context.Context, username string) (*hospital.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDoctorByUsername", ctx, username)
	ret0, _ := ret[0].(*hospital.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDoctorByUsername indicates an expected call of FindDoctorByUsername.
func (mr *MockSystemClientMockRecorder) FindDoctorByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDoctorByUsername", reflect.TypeOf((*MockSystemClient)(nil).FindDoctorByUsername), ctx, username)
}

// FindInvoiceByID mocks base method.
func (m *MockSystemClient) FindInvoiceByID(ctx context.Context, id int) (*hospital.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInvoiceByID", ctx, id)
	ret0, _ := ret[0].(*hospital.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInvoiceByID indicates an expected call of FindInvoiceByID.
func (mr *MockSystemClientMockRecorder) FindInvoiceByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInvoiceByID", reflect.TypeOf((*MockSystemClient)(nil).FindInvoiceByID), ctx, id)
}

// FindPatientByGovCredential mocks base method.
func (m *MockSystemClient) FindPatientByGovCredential(ctx context.Context, cred string) (*hospital.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPatientByGovCredential", ctx, cred)
	ret0, _ := ret[0].(*hospital.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPatientByGovCredential indicates an expected call of FindPatientByGovCredential.
func (mr *MockSystemClientMockRecorder) FindPatientByGovCredential(ctx, cred interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPatientByGovCredential", reflect.TypeOf((*MockSystemClient)(nil).FindPatientByGovCredential), ctx, cred)
}

// ListAppointmentsByPatientID mocks base method.
func (m *MockSystemClient) ListAppointmentsByPatientID(ctx context.Context, patientID string) ([]*hospital.Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppointmentsByPatientID", ctx, patientID)
	ret0, _ := ret[0].([]*hospital.Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppointmentsByPatientID indicates an expected call of ListAppointmentsByPatientID.
func (mr *MockSystemClientMockRecorder) ListAppointmentsByPatientID(ctx, patientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppointmentsByPatientID", reflect.TypeOf((*MockSystemClient)(nil).ListAppointmentsByPatientID), ctx, patientID)
}

// PaidInvoice mocks base method.
func (m *MockSystemClient) PaidInvoice(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaidInvoice", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// PaidInvoice indicates an expected call of PaidInvoice.
func (mr *MockSystemClientMockRecorder) PaidInvoice(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaidInvoice", reflect.TypeOf((*MockSystemClient)(nil).PaidInvoice), ctx, id)
}
