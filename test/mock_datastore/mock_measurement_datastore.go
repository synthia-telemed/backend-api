// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/datastore/measurement.go

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	datastore "github.com/synthia-telemed/backend-api/pkg/datastore"
)

// MockMeasurementDataStore is a mock of MeasurementDataStore interface.
type MockMeasurementDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockMeasurementDataStoreMockRecorder
}

// MockMeasurementDataStoreMockRecorder is the mock recorder for MockMeasurementDataStore.
type MockMeasurementDataStoreMockRecorder struct {
	mock *MockMeasurementDataStore
}

// NewMockMeasurementDataStore creates a new mock instance.
func NewMockMeasurementDataStore(ctrl *gomock.Controller) *MockMeasurementDataStore {
	mock := &MockMeasurementDataStore{ctrl: ctrl}
	mock.recorder = &MockMeasurementDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeasurementDataStore) EXPECT() *MockMeasurementDataStoreMockRecorder {
	return m.recorder
}

// CreateBloodPressure mocks base method.
func (m *MockMeasurementDataStore) CreateBloodPressure(bp *datastore.BloodPressure) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBloodPressure", bp)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBloodPressure indicates an expected call of CreateBloodPressure.
func (mr *MockMeasurementDataStoreMockRecorder) CreateBloodPressure(bp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBloodPressure", reflect.TypeOf((*MockMeasurementDataStore)(nil).CreateBloodPressure), bp)
}

// CreateGlucose mocks base method.
func (m *MockMeasurementDataStore) CreateGlucose(g *datastore.Glucose) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGlucose", g)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGlucose indicates an expected call of CreateGlucose.
func (mr *MockMeasurementDataStoreMockRecorder) CreateGlucose(g interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlucose", reflect.TypeOf((*MockMeasurementDataStore)(nil).CreateGlucose), g)
}
