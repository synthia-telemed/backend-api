// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package hospital

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

type AppointmentListRelationFilter struct {
	Every *AppointmentWhereInput `json:"every,omitempty"`
	None  *AppointmentWhereInput `json:"none,omitempty"`
	Some  *AppointmentWhereInput `json:"some,omitempty"`
}

// GetEvery returns AppointmentListRelationFilter.Every, and is useful for accessing the field via an interface.
func (v *AppointmentListRelationFilter) GetEvery() *AppointmentWhereInput { return v.Every }

// GetNone returns AppointmentListRelationFilter.None, and is useful for accessing the field via an interface.
func (v *AppointmentListRelationFilter) GetNone() *AppointmentWhereInput { return v.None }

// GetSome returns AppointmentListRelationFilter.Some, and is useful for accessing the field via an interface.
func (v *AppointmentListRelationFilter) GetSome() *AppointmentWhereInput { return v.Some }

type AppointmentRelationFilter struct {
	Is    *AppointmentWhereInput `json:"is,omitempty"`
	IsNot *AppointmentWhereInput `json:"isNot,omitempty"`
}

// GetIs returns AppointmentRelationFilter.Is, and is useful for accessing the field via an interface.
func (v *AppointmentRelationFilter) GetIs() *AppointmentWhereInput { return v.Is }

// GetIsNot returns AppointmentRelationFilter.IsNot, and is useful for accessing the field via an interface.
func (v *AppointmentRelationFilter) GetIsNot() *AppointmentWhereInput { return v.IsNot }

type AppointmentStatus string

const (
	AppointmentStatusCancelled AppointmentStatus = "CANCELLED"
	AppointmentStatusCompleted AppointmentStatus = "COMPLETED"
	AppointmentStatusScheduled AppointmentStatus = "SCHEDULED"
)

type AppointmentWhereInput struct {
	AND             []*AppointmentWhereInput        `json:"AND,omitempty"`
	NOT             []*AppointmentWhereInput        `json:"NOT,omitempty"`
	OR              []*AppointmentWhereInput        `json:"OR,omitempty"`
	CreatedAt       *DateTimeFilter                 `json:"createdAt,omitempty"`
	DateTime        *DateTimeFilter                 `json:"dateTime,omitempty"`
	Detail          *StringFilter                   `json:"detail,omitempty"`
	Doctor          *DoctorRelationFilter           `json:"doctor,omitempty"`
	DoctorId        *IntFilter                      `json:"doctorId,omitempty"`
	Id              *IntFilter                      `json:"id,omitempty"`
	Invoice         *InvoiceRelationFilter          `json:"invoice,omitempty"`
	NextAppointment *DateTimeNullableFilter         `json:"nextAppointment,omitempty"`
	Patient         *PatientRelationFilter          `json:"patient,omitempty"`
	PatientId       *StringFilter                   `json:"patientId,omitempty"`
	Prescriptions   *PrescriptionListRelationFilter `json:"prescriptions,omitempty"`
	Status          *EnumAppointmentStatusFilter    `json:"status,omitempty"`
	UpdatedAt       *DateTimeFilter                 `json:"updatedAt,omitempty"`
}

// GetAND returns AppointmentWhereInput.AND, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetAND() []*AppointmentWhereInput { return v.AND }

// GetNOT returns AppointmentWhereInput.NOT, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetNOT() []*AppointmentWhereInput { return v.NOT }

// GetOR returns AppointmentWhereInput.OR, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetOR() []*AppointmentWhereInput { return v.OR }

// GetCreatedAt returns AppointmentWhereInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetCreatedAt() *DateTimeFilter { return v.CreatedAt }

// GetDateTime returns AppointmentWhereInput.DateTime, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetDateTime() *DateTimeFilter { return v.DateTime }

// GetDetail returns AppointmentWhereInput.Detail, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetDetail() *StringFilter { return v.Detail }

// GetDoctor returns AppointmentWhereInput.Doctor, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetDoctor() *DoctorRelationFilter { return v.Doctor }

// GetDoctorId returns AppointmentWhereInput.DoctorId, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetDoctorId() *IntFilter { return v.DoctorId }

// GetId returns AppointmentWhereInput.Id, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetId() *IntFilter { return v.Id }

// GetInvoice returns AppointmentWhereInput.Invoice, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetInvoice() *InvoiceRelationFilter { return v.Invoice }

// GetNextAppointment returns AppointmentWhereInput.NextAppointment, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetNextAppointment() *DateTimeNullableFilter {
	return v.NextAppointment
}

// GetPatient returns AppointmentWhereInput.Patient, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetPatient() *PatientRelationFilter { return v.Patient }

// GetPatientId returns AppointmentWhereInput.PatientId, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetPatientId() *StringFilter { return v.PatientId }

// GetPrescriptions returns AppointmentWhereInput.Prescriptions, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetPrescriptions() *PrescriptionListRelationFilter {
	return v.Prescriptions
}

// GetStatus returns AppointmentWhereInput.Status, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetStatus() *EnumAppointmentStatusFilter { return v.Status }

// GetUpdatedAt returns AppointmentWhereInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetUpdatedAt() *DateTimeFilter { return v.UpdatedAt }

type BloodType string

const (
	BloodTypeA  BloodType = "A"
	BloodTypeAb BloodType = "AB"
	BloodTypeB  BloodType = "B"
	BloodTypeO  BloodType = "O"
)

type BoolFilter struct {
	Equals bool              `json:"equals"`
	Not    *NestedBoolFilter `json:"not,omitempty"`
}

// GetEquals returns BoolFilter.Equals, and is useful for accessing the field via an interface.
func (v *BoolFilter) GetEquals() bool { return v.Equals }

// GetNot returns BoolFilter.Not, and is useful for accessing the field via an interface.
func (v *BoolFilter) GetNot() *NestedBoolFilter { return v.Not }

type DateTimeFilter struct {
	Equals time.Time             `json:"equals"`
	Gt     time.Time             `json:"gt"`
	Gte    time.Time             `json:"gte"`
	In     []time.Time           `json:"in"`
	Lt     time.Time             `json:"lt"`
	Lte    time.Time             `json:"lte"`
	Not    *NestedDateTimeFilter `json:"not,omitempty"`
	NotIn  []time.Time           `json:"notIn"`
}

// GetEquals returns DateTimeFilter.Equals, and is useful for accessing the field via an interface.
func (v *DateTimeFilter) GetEquals() time.Time { return v.Equals }

// GetGt returns DateTimeFilter.Gt, and is useful for accessing the field via an interface.
func (v *DateTimeFilter) GetGt() time.Time { return v.Gt }

// GetGte returns DateTimeFilter.Gte, and is useful for accessing the field via an interface.
func (v *DateTimeFilter) GetGte() time.Time { return v.Gte }

// GetIn returns DateTimeFilter.In, and is useful for accessing the field via an interface.
func (v *DateTimeFilter) GetIn() []time.Time { return v.In }

// GetLt returns DateTimeFilter.Lt, and is useful for accessing the field via an interface.
func (v *DateTimeFilter) GetLt() time.Time { return v.Lt }

// GetLte returns DateTimeFilter.Lte, and is useful for accessing the field via an interface.
func (v *DateTimeFilter) GetLte() time.Time { return v.Lte }

// GetNot returns DateTimeFilter.Not, and is useful for accessing the field via an interface.
func (v *DateTimeFilter) GetNot() *NestedDateTimeFilter { return v.Not }

// GetNotIn returns DateTimeFilter.NotIn, and is useful for accessing the field via an interface.
func (v *DateTimeFilter) GetNotIn() []time.Time { return v.NotIn }

type DateTimeNullableFilter struct {
	Equals time.Time                     `json:"equals"`
	Gt     time.Time                     `json:"gt"`
	Gte    time.Time                     `json:"gte"`
	In     []time.Time                   `json:"in"`
	Lt     time.Time                     `json:"lt"`
	Lte    time.Time                     `json:"lte"`
	Not    *NestedDateTimeNullableFilter `json:"not,omitempty"`
	NotIn  []time.Time                   `json:"notIn"`
}

// GetEquals returns DateTimeNullableFilter.Equals, and is useful for accessing the field via an interface.
func (v *DateTimeNullableFilter) GetEquals() time.Time { return v.Equals }

// GetGt returns DateTimeNullableFilter.Gt, and is useful for accessing the field via an interface.
func (v *DateTimeNullableFilter) GetGt() time.Time { return v.Gt }

// GetGte returns DateTimeNullableFilter.Gte, and is useful for accessing the field via an interface.
func (v *DateTimeNullableFilter) GetGte() time.Time { return v.Gte }

// GetIn returns DateTimeNullableFilter.In, and is useful for accessing the field via an interface.
func (v *DateTimeNullableFilter) GetIn() []time.Time { return v.In }

// GetLt returns DateTimeNullableFilter.Lt, and is useful for accessing the field via an interface.
func (v *DateTimeNullableFilter) GetLt() time.Time { return v.Lt }

// GetLte returns DateTimeNullableFilter.Lte, and is useful for accessing the field via an interface.
func (v *DateTimeNullableFilter) GetLte() time.Time { return v.Lte }

// GetNot returns DateTimeNullableFilter.Not, and is useful for accessing the field via an interface.
func (v *DateTimeNullableFilter) GetNot() *NestedDateTimeNullableFilter { return v.Not }

// GetNotIn returns DateTimeNullableFilter.NotIn, and is useful for accessing the field via an interface.
func (v *DateTimeNullableFilter) GetNotIn() []time.Time { return v.NotIn }

type DoctorRelationFilter struct {
	Is    *DoctorWhereInput `json:"is,omitempty"`
	IsNot *DoctorWhereInput `json:"isNot,omitempty"`
}

// GetIs returns DoctorRelationFilter.Is, and is useful for accessing the field via an interface.
func (v *DoctorRelationFilter) GetIs() *DoctorWhereInput { return v.Is }

// GetIsNot returns DoctorRelationFilter.IsNot, and is useful for accessing the field via an interface.
func (v *DoctorRelationFilter) GetIsNot() *DoctorWhereInput { return v.IsNot }

type DoctorWhereInput struct {
	AND          []*DoctorWhereInput            `json:"AND,omitempty"`
	NOT          []*DoctorWhereInput            `json:"NOT,omitempty"`
	OR           []*DoctorWhereInput            `json:"OR,omitempty"`
	Appointments *AppointmentListRelationFilter `json:"appointments,omitempty"`
	CreatedAt    *DateTimeFilter                `json:"createdAt,omitempty"`
	Firstname_en *StringFilter                  `json:"firstname_en,omitempty"`
	Firstname_th *StringFilter                  `json:"firstname_th,omitempty"`
	Id           *IntFilter                     `json:"id,omitempty"`
	Initial_en   *StringFilter                  `json:"initial_en,omitempty"`
	Initial_th   *StringFilter                  `json:"initial_th,omitempty"`
	Lastname_en  *StringFilter                  `json:"lastname_en,omitempty"`
	Lastname_th  *StringFilter                  `json:"lastname_th,omitempty"`
	Password     *StringFilter                  `json:"password,omitempty"`
	Position     *StringFilter                  `json:"position,omitempty"`
	UpdatedAt    *DateTimeFilter                `json:"updatedAt,omitempty"`
	Username     *StringFilter                  `json:"username,omitempty"`
}

// GetAND returns DoctorWhereInput.AND, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetAND() []*DoctorWhereInput { return v.AND }

// GetNOT returns DoctorWhereInput.NOT, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetNOT() []*DoctorWhereInput { return v.NOT }

// GetOR returns DoctorWhereInput.OR, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetOR() []*DoctorWhereInput { return v.OR }

// GetAppointments returns DoctorWhereInput.Appointments, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetAppointments() *AppointmentListRelationFilter { return v.Appointments }

// GetCreatedAt returns DoctorWhereInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetCreatedAt() *DateTimeFilter { return v.CreatedAt }

// GetFirstname_en returns DoctorWhereInput.Firstname_en, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetFirstname_en() *StringFilter { return v.Firstname_en }

// GetFirstname_th returns DoctorWhereInput.Firstname_th, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetFirstname_th() *StringFilter { return v.Firstname_th }

// GetId returns DoctorWhereInput.Id, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetId() *IntFilter { return v.Id }

// GetInitial_en returns DoctorWhereInput.Initial_en, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetInitial_en() *StringFilter { return v.Initial_en }

// GetInitial_th returns DoctorWhereInput.Initial_th, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetInitial_th() *StringFilter { return v.Initial_th }

// GetLastname_en returns DoctorWhereInput.Lastname_en, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetLastname_en() *StringFilter { return v.Lastname_en }

// GetLastname_th returns DoctorWhereInput.Lastname_th, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetLastname_th() *StringFilter { return v.Lastname_th }

// GetPassword returns DoctorWhereInput.Password, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetPassword() *StringFilter { return v.Password }

// GetPosition returns DoctorWhereInput.Position, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetPosition() *StringFilter { return v.Position }

// GetUpdatedAt returns DoctorWhereInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetUpdatedAt() *DateTimeFilter { return v.UpdatedAt }

// GetUsername returns DoctorWhereInput.Username, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetUsername() *StringFilter { return v.Username }

type EnumAppointmentStatusFilter struct {
	Equals AppointmentStatus                  `json:"equals"`
	In     []AppointmentStatus                `json:"in"`
	Not    *NestedEnumAppointmentStatusFilter `json:"not,omitempty"`
	NotIn  []AppointmentStatus                `json:"notIn"`
}

// GetEquals returns EnumAppointmentStatusFilter.Equals, and is useful for accessing the field via an interface.
func (v *EnumAppointmentStatusFilter) GetEquals() AppointmentStatus { return v.Equals }

// GetIn returns EnumAppointmentStatusFilter.In, and is useful for accessing the field via an interface.
func (v *EnumAppointmentStatusFilter) GetIn() []AppointmentStatus { return v.In }

// GetNot returns EnumAppointmentStatusFilter.Not, and is useful for accessing the field via an interface.
func (v *EnumAppointmentStatusFilter) GetNot() *NestedEnumAppointmentStatusFilter { return v.Not }

// GetNotIn returns EnumAppointmentStatusFilter.NotIn, and is useful for accessing the field via an interface.
func (v *EnumAppointmentStatusFilter) GetNotIn() []AppointmentStatus { return v.NotIn }

type EnumBloodTypeFilter struct {
	Equals BloodType                  `json:"equals"`
	In     []BloodType                `json:"in"`
	Not    *NestedEnumBloodTypeFilter `json:"not,omitempty"`
	NotIn  []BloodType                `json:"notIn"`
}

// GetEquals returns EnumBloodTypeFilter.Equals, and is useful for accessing the field via an interface.
func (v *EnumBloodTypeFilter) GetEquals() BloodType { return v.Equals }

// GetIn returns EnumBloodTypeFilter.In, and is useful for accessing the field via an interface.
func (v *EnumBloodTypeFilter) GetIn() []BloodType { return v.In }

// GetNot returns EnumBloodTypeFilter.Not, and is useful for accessing the field via an interface.
func (v *EnumBloodTypeFilter) GetNot() *NestedEnumBloodTypeFilter { return v.Not }

// GetNotIn returns EnumBloodTypeFilter.NotIn, and is useful for accessing the field via an interface.
func (v *EnumBloodTypeFilter) GetNotIn() []BloodType { return v.NotIn }

type FloatFilter struct {
	Equals float64            `json:"equals"`
	Gt     float64            `json:"gt"`
	Gte    float64            `json:"gte"`
	In     []float64          `json:"in"`
	Lt     float64            `json:"lt"`
	Lte    float64            `json:"lte"`
	Not    *NestedFloatFilter `json:"not,omitempty"`
	NotIn  []float64          `json:"notIn"`
}

// GetEquals returns FloatFilter.Equals, and is useful for accessing the field via an interface.
func (v *FloatFilter) GetEquals() float64 { return v.Equals }

// GetGt returns FloatFilter.Gt, and is useful for accessing the field via an interface.
func (v *FloatFilter) GetGt() float64 { return v.Gt }

// GetGte returns FloatFilter.Gte, and is useful for accessing the field via an interface.
func (v *FloatFilter) GetGte() float64 { return v.Gte }

// GetIn returns FloatFilter.In, and is useful for accessing the field via an interface.
func (v *FloatFilter) GetIn() []float64 { return v.In }

// GetLt returns FloatFilter.Lt, and is useful for accessing the field via an interface.
func (v *FloatFilter) GetLt() float64 { return v.Lt }

// GetLte returns FloatFilter.Lte, and is useful for accessing the field via an interface.
func (v *FloatFilter) GetLte() float64 { return v.Lte }

// GetNot returns FloatFilter.Not, and is useful for accessing the field via an interface.
func (v *FloatFilter) GetNot() *NestedFloatFilter { return v.Not }

// GetNotIn returns FloatFilter.NotIn, and is useful for accessing the field via an interface.
func (v *FloatFilter) GetNotIn() []float64 { return v.NotIn }

type IntFilter struct {
	Equals int              `json:"equals"`
	Gt     int              `json:"gt"`
	Gte    int              `json:"gte"`
	In     []int            `json:"in"`
	Lt     int              `json:"lt"`
	Lte    int              `json:"lte"`
	Not    *NestedIntFilter `json:"not,omitempty"`
	NotIn  []int            `json:"notIn"`
}

// GetEquals returns IntFilter.Equals, and is useful for accessing the field via an interface.
func (v *IntFilter) GetEquals() int { return v.Equals }

// GetGt returns IntFilter.Gt, and is useful for accessing the field via an interface.
func (v *IntFilter) GetGt() int { return v.Gt }

// GetGte returns IntFilter.Gte, and is useful for accessing the field via an interface.
func (v *IntFilter) GetGte() int { return v.Gte }

// GetIn returns IntFilter.In, and is useful for accessing the field via an interface.
func (v *IntFilter) GetIn() []int { return v.In }

// GetLt returns IntFilter.Lt, and is useful for accessing the field via an interface.
func (v *IntFilter) GetLt() int { return v.Lt }

// GetLte returns IntFilter.Lte, and is useful for accessing the field via an interface.
func (v *IntFilter) GetLte() int { return v.Lte }

// GetNot returns IntFilter.Not, and is useful for accessing the field via an interface.
func (v *IntFilter) GetNot() *NestedIntFilter { return v.Not }

// GetNotIn returns IntFilter.NotIn, and is useful for accessing the field via an interface.
func (v *IntFilter) GetNotIn() []int { return v.NotIn }

type InvoiceItemListRelationFilter struct {
	Every *InvoiceItemWhereInput `json:"every,omitempty"`
	None  *InvoiceItemWhereInput `json:"none,omitempty"`
	Some  *InvoiceItemWhereInput `json:"some,omitempty"`
}

// GetEvery returns InvoiceItemListRelationFilter.Every, and is useful for accessing the field via an interface.
func (v *InvoiceItemListRelationFilter) GetEvery() *InvoiceItemWhereInput { return v.Every }

// GetNone returns InvoiceItemListRelationFilter.None, and is useful for accessing the field via an interface.
func (v *InvoiceItemListRelationFilter) GetNone() *InvoiceItemWhereInput { return v.None }

// GetSome returns InvoiceItemListRelationFilter.Some, and is useful for accessing the field via an interface.
func (v *InvoiceItemListRelationFilter) GetSome() *InvoiceItemWhereInput { return v.Some }

type InvoiceItemWhereInput struct {
	AND       []*InvoiceItemWhereInput `json:"AND,omitempty"`
	NOT       []*InvoiceItemWhereInput `json:"NOT,omitempty"`
	OR        []*InvoiceItemWhereInput `json:"OR,omitempty"`
	CreatedAt *DateTimeFilter          `json:"createdAt,omitempty"`
	Id        *IntFilter               `json:"id,omitempty"`
	Invoice   *InvoiceRelationFilter   `json:"invoice,omitempty"`
	InvoiceId *IntFilter               `json:"invoiceId,omitempty"`
	Name      *StringFilter            `json:"name,omitempty"`
	Price     *FloatFilter             `json:"price,omitempty"`
	Quantity  *IntFilter               `json:"quantity,omitempty"`
	UpdatedAt *DateTimeFilter          `json:"updatedAt,omitempty"`
}

// GetAND returns InvoiceItemWhereInput.AND, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetAND() []*InvoiceItemWhereInput { return v.AND }

// GetNOT returns InvoiceItemWhereInput.NOT, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetNOT() []*InvoiceItemWhereInput { return v.NOT }

// GetOR returns InvoiceItemWhereInput.OR, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetOR() []*InvoiceItemWhereInput { return v.OR }

// GetCreatedAt returns InvoiceItemWhereInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetCreatedAt() *DateTimeFilter { return v.CreatedAt }

// GetId returns InvoiceItemWhereInput.Id, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetId() *IntFilter { return v.Id }

// GetInvoice returns InvoiceItemWhereInput.Invoice, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetInvoice() *InvoiceRelationFilter { return v.Invoice }

// GetInvoiceId returns InvoiceItemWhereInput.InvoiceId, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetInvoiceId() *IntFilter { return v.InvoiceId }

// GetName returns InvoiceItemWhereInput.Name, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetName() *StringFilter { return v.Name }

// GetPrice returns InvoiceItemWhereInput.Price, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetPrice() *FloatFilter { return v.Price }

// GetQuantity returns InvoiceItemWhereInput.Quantity, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetQuantity() *IntFilter { return v.Quantity }

// GetUpdatedAt returns InvoiceItemWhereInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetUpdatedAt() *DateTimeFilter { return v.UpdatedAt }

type InvoiceRelationFilter struct {
	Is    *InvoiceWhereInput `json:"is,omitempty"`
	IsNot *InvoiceWhereInput `json:"isNot,omitempty"`
}

// GetIs returns InvoiceRelationFilter.Is, and is useful for accessing the field via an interface.
func (v *InvoiceRelationFilter) GetIs() *InvoiceWhereInput { return v.Is }

// GetIsNot returns InvoiceRelationFilter.IsNot, and is useful for accessing the field via an interface.
func (v *InvoiceRelationFilter) GetIsNot() *InvoiceWhereInput { return v.IsNot }

type InvoiceWhereInput struct {
	AND           []*InvoiceWhereInput           `json:"AND,omitempty"`
	NOT           []*InvoiceWhereInput           `json:"NOT,omitempty"`
	OR            []*InvoiceWhereInput           `json:"OR,omitempty"`
	Appointment   *AppointmentRelationFilter     `json:"appointment,omitempty"`
	AppointmentId *IntFilter                     `json:"appointmentId,omitempty"`
	CreatedAt     *DateTimeFilter                `json:"createdAt,omitempty"`
	Id            *IntFilter                     `json:"id,omitempty"`
	InvoiceItems  *InvoiceItemListRelationFilter `json:"invoiceItems,omitempty"`
	Paid          *BoolFilter                    `json:"paid,omitempty"`
	Total         *FloatFilter                   `json:"total,omitempty"`
	UpdatedAt     *DateTimeFilter                `json:"updatedAt,omitempty"`
}

// GetAND returns InvoiceWhereInput.AND, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetAND() []*InvoiceWhereInput { return v.AND }

// GetNOT returns InvoiceWhereInput.NOT, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetNOT() []*InvoiceWhereInput { return v.NOT }

// GetOR returns InvoiceWhereInput.OR, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetOR() []*InvoiceWhereInput { return v.OR }

// GetAppointment returns InvoiceWhereInput.Appointment, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetAppointment() *AppointmentRelationFilter { return v.Appointment }

// GetAppointmentId returns InvoiceWhereInput.AppointmentId, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetAppointmentId() *IntFilter { return v.AppointmentId }

// GetCreatedAt returns InvoiceWhereInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetCreatedAt() *DateTimeFilter { return v.CreatedAt }

// GetId returns InvoiceWhereInput.Id, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetId() *IntFilter { return v.Id }

// GetInvoiceItems returns InvoiceWhereInput.InvoiceItems, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetInvoiceItems() *InvoiceItemListRelationFilter { return v.InvoiceItems }

// GetPaid returns InvoiceWhereInput.Paid, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetPaid() *BoolFilter { return v.Paid }

// GetTotal returns InvoiceWhereInput.Total, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetTotal() *FloatFilter { return v.Total }

// GetUpdatedAt returns InvoiceWhereInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetUpdatedAt() *DateTimeFilter { return v.UpdatedAt }

type MedicineRelationFilter struct {
	Is    *MedicineWhereInput `json:"is,omitempty"`
	IsNot *MedicineWhereInput `json:"isNot,omitempty"`
}

// GetIs returns MedicineRelationFilter.Is, and is useful for accessing the field via an interface.
func (v *MedicineRelationFilter) GetIs() *MedicineWhereInput { return v.Is }

// GetIsNot returns MedicineRelationFilter.IsNot, and is useful for accessing the field via an interface.
func (v *MedicineRelationFilter) GetIsNot() *MedicineWhereInput { return v.IsNot }

type MedicineWhereInput struct {
	AND           []*MedicineWhereInput           `json:"AND,omitempty"`
	NOT           []*MedicineWhereInput           `json:"NOT,omitempty"`
	OR            []*MedicineWhereInput           `json:"OR,omitempty"`
	CreatedAt     *DateTimeFilter                 `json:"createdAt,omitempty"`
	Description   *StringFilter                   `json:"description,omitempty"`
	Id            *IntFilter                      `json:"id,omitempty"`
	Name          *StringFilter                   `json:"name,omitempty"`
	Prescriptions *PrescriptionListRelationFilter `json:"prescriptions,omitempty"`
	UpdatedAt     *DateTimeFilter                 `json:"updatedAt,omitempty"`
}

// GetAND returns MedicineWhereInput.AND, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetAND() []*MedicineWhereInput { return v.AND }

// GetNOT returns MedicineWhereInput.NOT, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetNOT() []*MedicineWhereInput { return v.NOT }

// GetOR returns MedicineWhereInput.OR, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetOR() []*MedicineWhereInput { return v.OR }

// GetCreatedAt returns MedicineWhereInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetCreatedAt() *DateTimeFilter { return v.CreatedAt }

// GetDescription returns MedicineWhereInput.Description, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetDescription() *StringFilter { return v.Description }

// GetId returns MedicineWhereInput.Id, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetId() *IntFilter { return v.Id }

// GetName returns MedicineWhereInput.Name, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetName() *StringFilter { return v.Name }

// GetPrescriptions returns MedicineWhereInput.Prescriptions, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetPrescriptions() *PrescriptionListRelationFilter {
	return v.Prescriptions
}

// GetUpdatedAt returns MedicineWhereInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetUpdatedAt() *DateTimeFilter { return v.UpdatedAt }

type NestedBoolFilter struct {
	Equals bool              `json:"equals"`
	Not    *NestedBoolFilter `json:"not,omitempty"`
}

// GetEquals returns NestedBoolFilter.Equals, and is useful for accessing the field via an interface.
func (v *NestedBoolFilter) GetEquals() bool { return v.Equals }

// GetNot returns NestedBoolFilter.Not, and is useful for accessing the field via an interface.
func (v *NestedBoolFilter) GetNot() *NestedBoolFilter { return v.Not }

type NestedDateTimeFilter struct {
	Equals time.Time             `json:"equals"`
	Gt     time.Time             `json:"gt"`
	Gte    time.Time             `json:"gte"`
	In     []time.Time           `json:"in"`
	Lt     time.Time             `json:"lt"`
	Lte    time.Time             `json:"lte"`
	Not    *NestedDateTimeFilter `json:"not,omitempty"`
	NotIn  []time.Time           `json:"notIn"`
}

// GetEquals returns NestedDateTimeFilter.Equals, and is useful for accessing the field via an interface.
func (v *NestedDateTimeFilter) GetEquals() time.Time { return v.Equals }

// GetGt returns NestedDateTimeFilter.Gt, and is useful for accessing the field via an interface.
func (v *NestedDateTimeFilter) GetGt() time.Time { return v.Gt }

// GetGte returns NestedDateTimeFilter.Gte, and is useful for accessing the field via an interface.
func (v *NestedDateTimeFilter) GetGte() time.Time { return v.Gte }

// GetIn returns NestedDateTimeFilter.In, and is useful for accessing the field via an interface.
func (v *NestedDateTimeFilter) GetIn() []time.Time { return v.In }

// GetLt returns NestedDateTimeFilter.Lt, and is useful for accessing the field via an interface.
func (v *NestedDateTimeFilter) GetLt() time.Time { return v.Lt }

// GetLte returns NestedDateTimeFilter.Lte, and is useful for accessing the field via an interface.
func (v *NestedDateTimeFilter) GetLte() time.Time { return v.Lte }

// GetNot returns NestedDateTimeFilter.Not, and is useful for accessing the field via an interface.
func (v *NestedDateTimeFilter) GetNot() *NestedDateTimeFilter { return v.Not }

// GetNotIn returns NestedDateTimeFilter.NotIn, and is useful for accessing the field via an interface.
func (v *NestedDateTimeFilter) GetNotIn() []time.Time { return v.NotIn }

type NestedDateTimeNullableFilter struct {
	Equals time.Time                     `json:"equals"`
	Gt     time.Time                     `json:"gt"`
	Gte    time.Time                     `json:"gte"`
	In     []time.Time                   `json:"in"`
	Lt     time.Time                     `json:"lt"`
	Lte    time.Time                     `json:"lte"`
	Not    *NestedDateTimeNullableFilter `json:"not,omitempty"`
	NotIn  []time.Time                   `json:"notIn"`
}

// GetEquals returns NestedDateTimeNullableFilter.Equals, and is useful for accessing the field via an interface.
func (v *NestedDateTimeNullableFilter) GetEquals() time.Time { return v.Equals }

// GetGt returns NestedDateTimeNullableFilter.Gt, and is useful for accessing the field via an interface.
func (v *NestedDateTimeNullableFilter) GetGt() time.Time { return v.Gt }

// GetGte returns NestedDateTimeNullableFilter.Gte, and is useful for accessing the field via an interface.
func (v *NestedDateTimeNullableFilter) GetGte() time.Time { return v.Gte }

// GetIn returns NestedDateTimeNullableFilter.In, and is useful for accessing the field via an interface.
func (v *NestedDateTimeNullableFilter) GetIn() []time.Time { return v.In }

// GetLt returns NestedDateTimeNullableFilter.Lt, and is useful for accessing the field via an interface.
func (v *NestedDateTimeNullableFilter) GetLt() time.Time { return v.Lt }

// GetLte returns NestedDateTimeNullableFilter.Lte, and is useful for accessing the field via an interface.
func (v *NestedDateTimeNullableFilter) GetLte() time.Time { return v.Lte }

// GetNot returns NestedDateTimeNullableFilter.Not, and is useful for accessing the field via an interface.
func (v *NestedDateTimeNullableFilter) GetNot() *NestedDateTimeNullableFilter { return v.Not }

// GetNotIn returns NestedDateTimeNullableFilter.NotIn, and is useful for accessing the field via an interface.
func (v *NestedDateTimeNullableFilter) GetNotIn() []time.Time { return v.NotIn }

type NestedEnumAppointmentStatusFilter struct {
	Equals AppointmentStatus                  `json:"equals"`
	In     []AppointmentStatus                `json:"in"`
	Not    *NestedEnumAppointmentStatusFilter `json:"not,omitempty"`
	NotIn  []AppointmentStatus                `json:"notIn"`
}

// GetEquals returns NestedEnumAppointmentStatusFilter.Equals, and is useful for accessing the field via an interface.
func (v *NestedEnumAppointmentStatusFilter) GetEquals() AppointmentStatus { return v.Equals }

// GetIn returns NestedEnumAppointmentStatusFilter.In, and is useful for accessing the field via an interface.
func (v *NestedEnumAppointmentStatusFilter) GetIn() []AppointmentStatus { return v.In }

// GetNot returns NestedEnumAppointmentStatusFilter.Not, and is useful for accessing the field via an interface.
func (v *NestedEnumAppointmentStatusFilter) GetNot() *NestedEnumAppointmentStatusFilter { return v.Not }

// GetNotIn returns NestedEnumAppointmentStatusFilter.NotIn, and is useful for accessing the field via an interface.
func (v *NestedEnumAppointmentStatusFilter) GetNotIn() []AppointmentStatus { return v.NotIn }

type NestedEnumBloodTypeFilter struct {
	Equals BloodType                  `json:"equals"`
	In     []BloodType                `json:"in"`
	Not    *NestedEnumBloodTypeFilter `json:"not,omitempty"`
	NotIn  []BloodType                `json:"notIn"`
}

// GetEquals returns NestedEnumBloodTypeFilter.Equals, and is useful for accessing the field via an interface.
func (v *NestedEnumBloodTypeFilter) GetEquals() BloodType { return v.Equals }

// GetIn returns NestedEnumBloodTypeFilter.In, and is useful for accessing the field via an interface.
func (v *NestedEnumBloodTypeFilter) GetIn() []BloodType { return v.In }

// GetNot returns NestedEnumBloodTypeFilter.Not, and is useful for accessing the field via an interface.
func (v *NestedEnumBloodTypeFilter) GetNot() *NestedEnumBloodTypeFilter { return v.Not }

// GetNotIn returns NestedEnumBloodTypeFilter.NotIn, and is useful for accessing the field via an interface.
func (v *NestedEnumBloodTypeFilter) GetNotIn() []BloodType { return v.NotIn }

type NestedFloatFilter struct {
	Equals float64            `json:"equals"`
	Gt     float64            `json:"gt"`
	Gte    float64            `json:"gte"`
	In     []float64          `json:"in"`
	Lt     float64            `json:"lt"`
	Lte    float64            `json:"lte"`
	Not    *NestedFloatFilter `json:"not,omitempty"`
	NotIn  []float64          `json:"notIn"`
}

// GetEquals returns NestedFloatFilter.Equals, and is useful for accessing the field via an interface.
func (v *NestedFloatFilter) GetEquals() float64 { return v.Equals }

// GetGt returns NestedFloatFilter.Gt, and is useful for accessing the field via an interface.
func (v *NestedFloatFilter) GetGt() float64 { return v.Gt }

// GetGte returns NestedFloatFilter.Gte, and is useful for accessing the field via an interface.
func (v *NestedFloatFilter) GetGte() float64 { return v.Gte }

// GetIn returns NestedFloatFilter.In, and is useful for accessing the field via an interface.
func (v *NestedFloatFilter) GetIn() []float64 { return v.In }

// GetLt returns NestedFloatFilter.Lt, and is useful for accessing the field via an interface.
func (v *NestedFloatFilter) GetLt() float64 { return v.Lt }

// GetLte returns NestedFloatFilter.Lte, and is useful for accessing the field via an interface.
func (v *NestedFloatFilter) GetLte() float64 { return v.Lte }

// GetNot returns NestedFloatFilter.Not, and is useful for accessing the field via an interface.
func (v *NestedFloatFilter) GetNot() *NestedFloatFilter { return v.Not }

// GetNotIn returns NestedFloatFilter.NotIn, and is useful for accessing the field via an interface.
func (v *NestedFloatFilter) GetNotIn() []float64 { return v.NotIn }

type NestedIntFilter struct {
	Equals int              `json:"equals"`
	Gt     int              `json:"gt"`
	Gte    int              `json:"gte"`
	In     []int            `json:"in"`
	Lt     int              `json:"lt"`
	Lte    int              `json:"lte"`
	Not    *NestedIntFilter `json:"not,omitempty"`
	NotIn  []int            `json:"notIn"`
}

// GetEquals returns NestedIntFilter.Equals, and is useful for accessing the field via an interface.
func (v *NestedIntFilter) GetEquals() int { return v.Equals }

// GetGt returns NestedIntFilter.Gt, and is useful for accessing the field via an interface.
func (v *NestedIntFilter) GetGt() int { return v.Gt }

// GetGte returns NestedIntFilter.Gte, and is useful for accessing the field via an interface.
func (v *NestedIntFilter) GetGte() int { return v.Gte }

// GetIn returns NestedIntFilter.In, and is useful for accessing the field via an interface.
func (v *NestedIntFilter) GetIn() []int { return v.In }

// GetLt returns NestedIntFilter.Lt, and is useful for accessing the field via an interface.
func (v *NestedIntFilter) GetLt() int { return v.Lt }

// GetLte returns NestedIntFilter.Lte, and is useful for accessing the field via an interface.
func (v *NestedIntFilter) GetLte() int { return v.Lte }

// GetNot returns NestedIntFilter.Not, and is useful for accessing the field via an interface.
func (v *NestedIntFilter) GetNot() *NestedIntFilter { return v.Not }

// GetNotIn returns NestedIntFilter.NotIn, and is useful for accessing the field via an interface.
func (v *NestedIntFilter) GetNotIn() []int { return v.NotIn }

type NestedStringFilter struct {
	Contains   string              `json:"contains"`
	EndsWith   string              `json:"endsWith"`
	Equals     string              `json:"equals"`
	Gt         string              `json:"gt"`
	Gte        string              `json:"gte"`
	In         []string            `json:"in"`
	Lt         string              `json:"lt"`
	Lte        string              `json:"lte"`
	Not        *NestedStringFilter `json:"not,omitempty"`
	NotIn      []string            `json:"notIn"`
	StartsWith string              `json:"startsWith"`
}

// GetContains returns NestedStringFilter.Contains, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetContains() string { return v.Contains }

// GetEndsWith returns NestedStringFilter.EndsWith, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetEndsWith() string { return v.EndsWith }

// GetEquals returns NestedStringFilter.Equals, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetEquals() string { return v.Equals }

// GetGt returns NestedStringFilter.Gt, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetGt() string { return v.Gt }

// GetGte returns NestedStringFilter.Gte, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetGte() string { return v.Gte }

// GetIn returns NestedStringFilter.In, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetIn() []string { return v.In }

// GetLt returns NestedStringFilter.Lt, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetLt() string { return v.Lt }

// GetLte returns NestedStringFilter.Lte, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetLte() string { return v.Lte }

// GetNot returns NestedStringFilter.Not, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetNot() *NestedStringFilter { return v.Not }

// GetNotIn returns NestedStringFilter.NotIn, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetNotIn() []string { return v.NotIn }

// GetStartsWith returns NestedStringFilter.StartsWith, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetStartsWith() string { return v.StartsWith }

type NestedStringNullableFilter struct {
	Contains   string                      `json:"contains"`
	EndsWith   string                      `json:"endsWith"`
	Equals     string                      `json:"equals"`
	Gt         string                      `json:"gt"`
	Gte        string                      `json:"gte"`
	In         []string                    `json:"in"`
	Lt         string                      `json:"lt"`
	Lte        string                      `json:"lte"`
	Not        *NestedStringNullableFilter `json:"not,omitempty"`
	NotIn      []string                    `json:"notIn"`
	StartsWith string                      `json:"startsWith"`
}

// GetContains returns NestedStringNullableFilter.Contains, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetContains() string { return v.Contains }

// GetEndsWith returns NestedStringNullableFilter.EndsWith, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetEndsWith() string { return v.EndsWith }

// GetEquals returns NestedStringNullableFilter.Equals, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetEquals() string { return v.Equals }

// GetGt returns NestedStringNullableFilter.Gt, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetGt() string { return v.Gt }

// GetGte returns NestedStringNullableFilter.Gte, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetGte() string { return v.Gte }

// GetIn returns NestedStringNullableFilter.In, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetIn() []string { return v.In }

// GetLt returns NestedStringNullableFilter.Lt, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetLt() string { return v.Lt }

// GetLte returns NestedStringNullableFilter.Lte, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetLte() string { return v.Lte }

// GetNot returns NestedStringNullableFilter.Not, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetNot() *NestedStringNullableFilter { return v.Not }

// GetNotIn returns NestedStringNullableFilter.NotIn, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetNotIn() []string { return v.NotIn }

// GetStartsWith returns NestedStringNullableFilter.StartsWith, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetStartsWith() string { return v.StartsWith }

type PatientRelationFilter struct {
	Is    *PatientWhereInput `json:"is,omitempty"`
	IsNot *PatientWhereInput `json:"isNot,omitempty"`
}

// GetIs returns PatientRelationFilter.Is, and is useful for accessing the field via an interface.
func (v *PatientRelationFilter) GetIs() *PatientWhereInput { return v.Is }

// GetIsNot returns PatientRelationFilter.IsNot, and is useful for accessing the field via an interface.
func (v *PatientRelationFilter) GetIsNot() *PatientWhereInput { return v.IsNot }

type PatientWhereInput struct {
	AND          []*PatientWhereInput           `json:"AND,omitempty"`
	NOT          []*PatientWhereInput           `json:"NOT,omitempty"`
	OR           []*PatientWhereInput           `json:"OR,omitempty"`
	Appointments *AppointmentListRelationFilter `json:"appointments,omitempty"`
	BirthDate    *DateTimeFilter                `json:"birthDate,omitempty"`
	BloodType    *EnumBloodTypeFilter           `json:"bloodType,omitempty"`
	CreatedAt    *DateTimeFilter                `json:"createdAt,omitempty"`
	Firstname_en *StringFilter                  `json:"firstname_en,omitempty"`
	Firstname_th *StringFilter                  `json:"firstname_th,omitempty"`
	Height       *FloatFilter                   `json:"height,omitempty"`
	Id           *StringFilter                  `json:"id,omitempty"`
	Initial_en   *StringFilter                  `json:"initial_en,omitempty"`
	Initial_th   *StringFilter                  `json:"initial_th,omitempty"`
	Lastname_en  *StringFilter                  `json:"lastname_en,omitempty"`
	Lastname_th  *StringFilter                  `json:"lastname_th,omitempty"`
	NationalId   *StringNullableFilter          `json:"nationalId,omitempty"`
	Nationality  *StringFilter                  `json:"nationality,omitempty"`
	PassportId   *StringNullableFilter          `json:"passportId,omitempty"`
	PhoneNumber  *StringFilter                  `json:"phoneNumber,omitempty"`
	UpdatedAt    *DateTimeFilter                `json:"updatedAt,omitempty"`
	Weight       *FloatFilter                   `json:"weight,omitempty"`
}

// GetAND returns PatientWhereInput.AND, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetAND() []*PatientWhereInput { return v.AND }

// GetNOT returns PatientWhereInput.NOT, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetNOT() []*PatientWhereInput { return v.NOT }

// GetOR returns PatientWhereInput.OR, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetOR() []*PatientWhereInput { return v.OR }

// GetAppointments returns PatientWhereInput.Appointments, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetAppointments() *AppointmentListRelationFilter { return v.Appointments }

// GetBirthDate returns PatientWhereInput.BirthDate, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetBirthDate() *DateTimeFilter { return v.BirthDate }

// GetBloodType returns PatientWhereInput.BloodType, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetBloodType() *EnumBloodTypeFilter { return v.BloodType }

// GetCreatedAt returns PatientWhereInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetCreatedAt() *DateTimeFilter { return v.CreatedAt }

// GetFirstname_en returns PatientWhereInput.Firstname_en, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetFirstname_en() *StringFilter { return v.Firstname_en }

// GetFirstname_th returns PatientWhereInput.Firstname_th, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetFirstname_th() *StringFilter { return v.Firstname_th }

// GetHeight returns PatientWhereInput.Height, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetHeight() *FloatFilter { return v.Height }

// GetId returns PatientWhereInput.Id, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetId() *StringFilter { return v.Id }

// GetInitial_en returns PatientWhereInput.Initial_en, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetInitial_en() *StringFilter { return v.Initial_en }

// GetInitial_th returns PatientWhereInput.Initial_th, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetInitial_th() *StringFilter { return v.Initial_th }

// GetLastname_en returns PatientWhereInput.Lastname_en, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetLastname_en() *StringFilter { return v.Lastname_en }

// GetLastname_th returns PatientWhereInput.Lastname_th, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetLastname_th() *StringFilter { return v.Lastname_th }

// GetNationalId returns PatientWhereInput.NationalId, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetNationalId() *StringNullableFilter { return v.NationalId }

// GetNationality returns PatientWhereInput.Nationality, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetNationality() *StringFilter { return v.Nationality }

// GetPassportId returns PatientWhereInput.PassportId, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetPassportId() *StringNullableFilter { return v.PassportId }

// GetPhoneNumber returns PatientWhereInput.PhoneNumber, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetPhoneNumber() *StringFilter { return v.PhoneNumber }

// GetUpdatedAt returns PatientWhereInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetUpdatedAt() *DateTimeFilter { return v.UpdatedAt }

// GetWeight returns PatientWhereInput.Weight, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetWeight() *FloatFilter { return v.Weight }

type PrescriptionListRelationFilter struct {
	Every *PrescriptionWhereInput `json:"every,omitempty"`
	None  *PrescriptionWhereInput `json:"none,omitempty"`
	Some  *PrescriptionWhereInput `json:"some,omitempty"`
}

// GetEvery returns PrescriptionListRelationFilter.Every, and is useful for accessing the field via an interface.
func (v *PrescriptionListRelationFilter) GetEvery() *PrescriptionWhereInput { return v.Every }

// GetNone returns PrescriptionListRelationFilter.None, and is useful for accessing the field via an interface.
func (v *PrescriptionListRelationFilter) GetNone() *PrescriptionWhereInput { return v.None }

// GetSome returns PrescriptionListRelationFilter.Some, and is useful for accessing the field via an interface.
func (v *PrescriptionListRelationFilter) GetSome() *PrescriptionWhereInput { return v.Some }

type PrescriptionWhereInput struct {
	AND           []*PrescriptionWhereInput  `json:"AND,omitempty"`
	NOT           []*PrescriptionWhereInput  `json:"NOT,omitempty"`
	OR            []*PrescriptionWhereInput  `json:"OR,omitempty"`
	Amount        *IntFilter                 `json:"amount,omitempty"`
	Appointment   *AppointmentRelationFilter `json:"appointment,omitempty"`
	AppointmentId *IntFilter                 `json:"appointmentId,omitempty"`
	CreatedAt     *DateTimeFilter            `json:"createdAt,omitempty"`
	Id            *IntFilter                 `json:"id,omitempty"`
	Medicine      *MedicineRelationFilter    `json:"medicine,omitempty"`
	MedicineId    *IntFilter                 `json:"medicineId,omitempty"`
	UpdatedAt     *DateTimeFilter            `json:"updatedAt,omitempty"`
}

// GetAND returns PrescriptionWhereInput.AND, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetAND() []*PrescriptionWhereInput { return v.AND }

// GetNOT returns PrescriptionWhereInput.NOT, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetNOT() []*PrescriptionWhereInput { return v.NOT }

// GetOR returns PrescriptionWhereInput.OR, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetOR() []*PrescriptionWhereInput { return v.OR }

// GetAmount returns PrescriptionWhereInput.Amount, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetAmount() *IntFilter { return v.Amount }

// GetAppointment returns PrescriptionWhereInput.Appointment, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetAppointment() *AppointmentRelationFilter { return v.Appointment }

// GetAppointmentId returns PrescriptionWhereInput.AppointmentId, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetAppointmentId() *IntFilter { return v.AppointmentId }

// GetCreatedAt returns PrescriptionWhereInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetCreatedAt() *DateTimeFilter { return v.CreatedAt }

// GetId returns PrescriptionWhereInput.Id, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetId() *IntFilter { return v.Id }

// GetMedicine returns PrescriptionWhereInput.Medicine, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetMedicine() *MedicineRelationFilter { return v.Medicine }

// GetMedicineId returns PrescriptionWhereInput.MedicineId, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetMedicineId() *IntFilter { return v.MedicineId }

// GetUpdatedAt returns PrescriptionWhereInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetUpdatedAt() *DateTimeFilter { return v.UpdatedAt }

type QueryMode string

const (
	QueryModeDefault     QueryMode = "default"
	QueryModeInsensitive QueryMode = "insensitive"
)

type StringFilter struct {
	Contains   string              `json:"contains"`
	EndsWith   string              `json:"endsWith"`
	Equals     string              `json:"equals"`
	Gt         string              `json:"gt"`
	Gte        string              `json:"gte"`
	In         []string            `json:"in"`
	Lt         string              `json:"lt"`
	Lte        string              `json:"lte"`
	Mode       QueryMode           `json:"mode"`
	Not        *NestedStringFilter `json:"not,omitempty"`
	NotIn      []string            `json:"notIn"`
	StartsWith string              `json:"startsWith"`
}

// GetContains returns StringFilter.Contains, and is useful for accessing the field via an interface.
func (v *StringFilter) GetContains() string { return v.Contains }

// GetEndsWith returns StringFilter.EndsWith, and is useful for accessing the field via an interface.
func (v *StringFilter) GetEndsWith() string { return v.EndsWith }

// GetEquals returns StringFilter.Equals, and is useful for accessing the field via an interface.
func (v *StringFilter) GetEquals() string { return v.Equals }

// GetGt returns StringFilter.Gt, and is useful for accessing the field via an interface.
func (v *StringFilter) GetGt() string { return v.Gt }

// GetGte returns StringFilter.Gte, and is useful for accessing the field via an interface.
func (v *StringFilter) GetGte() string { return v.Gte }

// GetIn returns StringFilter.In, and is useful for accessing the field via an interface.
func (v *StringFilter) GetIn() []string { return v.In }

// GetLt returns StringFilter.Lt, and is useful for accessing the field via an interface.
func (v *StringFilter) GetLt() string { return v.Lt }

// GetLte returns StringFilter.Lte, and is useful for accessing the field via an interface.
func (v *StringFilter) GetLte() string { return v.Lte }

// GetMode returns StringFilter.Mode, and is useful for accessing the field via an interface.
func (v *StringFilter) GetMode() QueryMode { return v.Mode }

// GetNot returns StringFilter.Not, and is useful for accessing the field via an interface.
func (v *StringFilter) GetNot() *NestedStringFilter { return v.Not }

// GetNotIn returns StringFilter.NotIn, and is useful for accessing the field via an interface.
func (v *StringFilter) GetNotIn() []string { return v.NotIn }

// GetStartsWith returns StringFilter.StartsWith, and is useful for accessing the field via an interface.
func (v *StringFilter) GetStartsWith() string { return v.StartsWith }

type StringNullableFilter struct {
	Contains   string                      `json:"contains"`
	EndsWith   string                      `json:"endsWith"`
	Equals     string                      `json:"equals"`
	Gt         string                      `json:"gt"`
	Gte        string                      `json:"gte"`
	In         []string                    `json:"in"`
	Lt         string                      `json:"lt"`
	Lte        string                      `json:"lte"`
	Mode       QueryMode                   `json:"mode"`
	Not        *NestedStringNullableFilter `json:"not,omitempty"`
	NotIn      []string                    `json:"notIn"`
	StartsWith string                      `json:"startsWith"`
}

// GetContains returns StringNullableFilter.Contains, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetContains() string { return v.Contains }

// GetEndsWith returns StringNullableFilter.EndsWith, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetEndsWith() string { return v.EndsWith }

// GetEquals returns StringNullableFilter.Equals, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetEquals() string { return v.Equals }

// GetGt returns StringNullableFilter.Gt, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetGt() string { return v.Gt }

// GetGte returns StringNullableFilter.Gte, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetGte() string { return v.Gte }

// GetIn returns StringNullableFilter.In, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetIn() []string { return v.In }

// GetLt returns StringNullableFilter.Lt, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetLt() string { return v.Lt }

// GetLte returns StringNullableFilter.Lte, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetLte() string { return v.Lte }

// GetMode returns StringNullableFilter.Mode, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetMode() QueryMode { return v.Mode }

// GetNot returns StringNullableFilter.Not, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetNot() *NestedStringNullableFilter { return v.Not }

// GetNotIn returns StringNullableFilter.NotIn, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetNotIn() []string { return v.NotIn }

// GetStartsWith returns StringNullableFilter.StartsWith, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetStartsWith() string { return v.StartsWith }

// __assertDoctorCredentialInput is used internally by genqlient
type __assertDoctorCredentialInput struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// GetPassword returns __assertDoctorCredentialInput.Password, and is useful for accessing the field via an interface.
func (v *__assertDoctorCredentialInput) GetPassword() string { return v.Password }

// GetUsername returns __assertDoctorCredentialInput.Username, and is useful for accessing the field via an interface.
func (v *__assertDoctorCredentialInput) GetUsername() string { return v.Username }

// __getDoctorInput is used internally by genqlient
type __getDoctorInput struct {
	Where *DoctorWhereInput `json:"where,omitempty"`
}

// GetWhere returns __getDoctorInput.Where, and is useful for accessing the field via an interface.
func (v *__getDoctorInput) GetWhere() *DoctorWhereInput { return v.Where }

// __getPatientInput is used internally by genqlient
type __getPatientInput struct {
	Where *PatientWhereInput `json:"where,omitempty"`
}

// GetWhere returns __getPatientInput.Where, and is useful for accessing the field via an interface.
func (v *__getPatientInput) GetWhere() *PatientWhereInput { return v.Where }

// assertDoctorCredentialResponse is returned by assertDoctorCredential on success.
type assertDoctorCredentialResponse struct {
	AssertDoctorPassword bool `json:"assertDoctorPassword"`
}

// GetAssertDoctorPassword returns assertDoctorCredentialResponse.AssertDoctorPassword, and is useful for accessing the field via an interface.
func (v *assertDoctorCredentialResponse) GetAssertDoctorPassword() bool {
	return v.AssertDoctorPassword
}

// getDoctorDoctor includes the requested fields of the GraphQL type Doctor.
type getDoctorDoctor struct {
	CreatedAt    time.Time `json:"createdAt"`
	Firstname_en string    `json:"firstname_en"`
	Firstname_th string    `json:"firstname_th"`
	Id           string    `json:"id"`
	Initial_en   string    `json:"initial_en"`
	Initial_th   string    `json:"initial_th"`
	Lastname_en  string    `json:"lastname_en"`
	Lastname_th  string    `json:"lastname_th"`
	Password     string    `json:"password"`
	Position     string    `json:"position"`
	UpdatedAt    time.Time `json:"updatedAt"`
	Username     string    `json:"username"`
}

// GetCreatedAt returns getDoctorDoctor.CreatedAt, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetCreatedAt() time.Time { return v.CreatedAt }

// GetFirstname_en returns getDoctorDoctor.Firstname_en, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetFirstname_en() string { return v.Firstname_en }

// GetFirstname_th returns getDoctorDoctor.Firstname_th, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetFirstname_th() string { return v.Firstname_th }

// GetId returns getDoctorDoctor.Id, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetId() string { return v.Id }

// GetInitial_en returns getDoctorDoctor.Initial_en, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetInitial_en() string { return v.Initial_en }

// GetInitial_th returns getDoctorDoctor.Initial_th, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetInitial_th() string { return v.Initial_th }

// GetLastname_en returns getDoctorDoctor.Lastname_en, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetLastname_en() string { return v.Lastname_en }

// GetLastname_th returns getDoctorDoctor.Lastname_th, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetLastname_th() string { return v.Lastname_th }

// GetPassword returns getDoctorDoctor.Password, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetPassword() string { return v.Password }

// GetPosition returns getDoctorDoctor.Position, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetPosition() string { return v.Position }

// GetUpdatedAt returns getDoctorDoctor.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetUsername returns getDoctorDoctor.Username, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetUsername() string { return v.Username }

// getDoctorResponse is returned by getDoctor on success.
type getDoctorResponse struct {
	Doctor *getDoctorDoctor `json:"doctor"`
}

// GetDoctor returns getDoctorResponse.Doctor, and is useful for accessing the field via an interface.
func (v *getDoctorResponse) GetDoctor() *getDoctorDoctor { return v.Doctor }

// getPatientPatient includes the requested fields of the GraphQL type Patient.
type getPatientPatient struct {
	BirthDate    time.Time `json:"birthDate"`
	BloodType    BloodType `json:"bloodType"`
	CreatedAt    time.Time `json:"createdAt"`
	Firstname_en string    `json:"firstname_en"`
	Firstname_th string    `json:"firstname_th"`
	Height       float64   `json:"height"`
	Id           string    `json:"id"`
	Initial_en   string    `json:"initial_en"`
	Initial_th   string    `json:"initial_th"`
	Lastname_en  string    `json:"lastname_en"`
	Lastname_th  string    `json:"lastname_th"`
	NationalId   string    `json:"nationalId"`
	Nationality  string    `json:"nationality"`
	PassportId   string    `json:"passportId"`
	PhoneNumber  string    `json:"phoneNumber"`
	UpdatedAt    time.Time `json:"updatedAt"`
	Weight       float64   `json:"weight"`
}

// GetBirthDate returns getPatientPatient.BirthDate, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetBirthDate() time.Time { return v.BirthDate }

// GetBloodType returns getPatientPatient.BloodType, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetBloodType() BloodType { return v.BloodType }

// GetCreatedAt returns getPatientPatient.CreatedAt, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetCreatedAt() time.Time { return v.CreatedAt }

// GetFirstname_en returns getPatientPatient.Firstname_en, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetFirstname_en() string { return v.Firstname_en }

// GetFirstname_th returns getPatientPatient.Firstname_th, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetFirstname_th() string { return v.Firstname_th }

// GetHeight returns getPatientPatient.Height, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetHeight() float64 { return v.Height }

// GetId returns getPatientPatient.Id, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetId() string { return v.Id }

// GetInitial_en returns getPatientPatient.Initial_en, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetInitial_en() string { return v.Initial_en }

// GetInitial_th returns getPatientPatient.Initial_th, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetInitial_th() string { return v.Initial_th }

// GetLastname_en returns getPatientPatient.Lastname_en, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetLastname_en() string { return v.Lastname_en }

// GetLastname_th returns getPatientPatient.Lastname_th, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetLastname_th() string { return v.Lastname_th }

// GetNationalId returns getPatientPatient.NationalId, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetNationalId() string { return v.NationalId }

// GetNationality returns getPatientPatient.Nationality, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetNationality() string { return v.Nationality }

// GetPassportId returns getPatientPatient.PassportId, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetPassportId() string { return v.PassportId }

// GetPhoneNumber returns getPatientPatient.PhoneNumber, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetPhoneNumber() string { return v.PhoneNumber }

// GetUpdatedAt returns getPatientPatient.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetWeight returns getPatientPatient.Weight, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetWeight() float64 { return v.Weight }

// getPatientResponse is returned by getPatient on success.
type getPatientResponse struct {
	Patient *getPatientPatient `json:"patient"`
}

// GetPatient returns getPatientResponse.Patient, and is useful for accessing the field via an interface.
func (v *getPatientResponse) GetPatient() *getPatientPatient { return v.Patient }

func assertDoctorCredential(
	ctx context.Context,
	client graphql.Client,
	password string,
	username string,
) (*assertDoctorCredentialResponse, error) {
	req := &graphql.Request{
		OpName: "assertDoctorCredential",
		Query: `
query assertDoctorCredential ($password: String!, $username: String!) {
	assertDoctorPassword(password: $password, username: $username)
}
`,
		Variables: &__assertDoctorCredentialInput{
			Password: password,
			Username: username,
		},
	}
	var err error

	var data assertDoctorCredentialResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getDoctor(
	ctx context.Context,
	client graphql.Client,
	where *DoctorWhereInput,
) (*getDoctorResponse, error) {
	req := &graphql.Request{
		OpName: "getDoctor",
		Query: `
query getDoctor ($where: DoctorWhereInput!) {
	doctor(where: $where) {
		createdAt
		firstname_en
		firstname_th
		id
		initial_en
		initial_th
		lastname_en
		lastname_th
		password
		position
		updatedAt
		username
	}
}
`,
		Variables: &__getDoctorInput{
			Where: where,
		},
	}
	var err error

	var data getDoctorResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getPatient(
	ctx context.Context,
	client graphql.Client,
	where *PatientWhereInput,
) (*getPatientResponse, error) {
	req := &graphql.Request{
		OpName: "getPatient",
		Query: `
query getPatient ($where: PatientWhereInput!) {
	patient(where: $where) {
		birthDate
		bloodType
		createdAt
		firstname_en
		firstname_th
		height
		id
		initial_en
		initial_th
		lastname_en
		lastname_th
		nationalId
		nationality
		passportId
		phoneNumber
		updatedAt
		weight
	}
}
`,
		Variables: &__getPatientInput{
			Where: where,
		},
	}
	var err error

	var data getPatientResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
